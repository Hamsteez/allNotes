meta characters: 
$ ^ * + ? . ( ) [ ] { } | \ /

need to use \ before using these characters if you want to search for it.
ex: to search for a ? in a str, you need to type /\?/

the meta for | is to separate two strs:
to search for cat and dog you would do: /(cat|dog)/

/\t/ , /\n/ , /\r/ look for tabs, new lines, and carriage returns

flags: to search str without case sensitivity:
  to find launch Launch LAUNCH or lAunch etc use: /launch/i

inside a character class, some don't need the \ beforehand. These still
do: ^ \ - [ ]

the . matches with any character. eg: /./
if put between [] like [.] then it becomes literal.

/\s/ is equivalent to /[ \t\v\r\n\f]/, 
while /\S/ is equivalent to /[^ \t\v\r\n\f]/

Shortcut	Meaning
\d	      Any decimal digit (0-9)
\D	      Any character but a decimal digit

\w word characters: a-z A-Z 0-9 and _ 
\W non word characters

^ forces match to beginning of the line
$ forces match to end of line
\b matches to word boundaries
\B nonword boundaries

* quantifier: whatever comes before it can occur 0 or more times.
eg: 1(234)*5 matches with both 15, 12345 and 12342345
+ quantifier: 1 or more times (similar to *)
? : matches 0 or 1 occurrences

...{num} matches ... with num times after
...{num,} matches ... with num or more times after
...{num1, num2} matches ... between num1 and num2 times

greediness:
/a[abc]*c/ against xabcbcbacy matches abcbcbac --> GREEDY
/a[abc]*?c/ against xabcbcbacy matches abc and ac --> LAZY

capture quotes:
/(['"]).+?\1/ --> takes the character found in the () and uses the same character again
when \1 is used. this is a backreference. To use backreference in string
you need to use $1 or $2 and so on, within the string. 

Basic Matching
Pattern	Meaning
/a/	Match the character a
/\?/, /\./	Match a meta-character literally
/\n/, /\t/	Match a control character (newline, tab, etc)
/pq/	Concatenation (p followed by q)
/(p)/	Capture Group
/(p|q)/	Alternation (p or q)
/p/i	Case insensitive match

Character Classes and Shortcuts
Pattern	Meaning
/[ab]/	a or b
/[a-z]/	a through z, inclusive
/[^ab]/	Not (a or b)
/[^a-z]/	Not (a through z)
/./	Any character except newline
/\s/, /[\s]/	Whitespace character (space, tab, newline, etc)
/\S/, /[\S]/	Not a whitespace character
/\d/, /[\d]/	Decimal digit (0-9)
/\D/, /[\D]/	Not a decimal digit
/\w/, /[\w]/	Word character (0-9, a-z, A-Z, _)
/\W/, /[\W]/	Not a word character

Anchors
Pattern	Meaning
/^p/	Pattern at start of line
/p$/	Pattern at end of line
/\Ap/	Pattern at start of string
/p\z/	Pattern at end of string (after newline)
/p\Z/	Pattern at end of string (before newline)
/\bp/	Pattern begins at word boundary
/p\b/	Pattern ends at word boundary
/\Bp/	Pattern begins at non-word boundary
/p\B/	Pattern ends at non-word boundary

Quantifiers
Pattern	Meaning
/p*/	0 or more occurrences of pattern
/p+/	1 or more occurrences of pattern
/p?/	0 or 1 occurrence of pattern
/p{m}/	m occurrences of pattern
/p{m,}/	m or more occurrences of pattern
/p{m,n}/	m through n occurrences of pattern
/p*?/	0 or more occurrences (lazy)
/p+?/	1 or more occurrences (lazy)
/p??/	0 or 1 occurrence (lazy)
/p{m,}?/	m or more occurrences (lazy)
/p{m,n}?/	m through n occurrences (lazy)

Common JavaScript Functions for Regex
Method	Use
String.match	Determine if regex matches a string
String.split	Split string by regex
String.replace	Replace regex match